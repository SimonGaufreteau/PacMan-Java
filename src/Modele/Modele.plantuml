@startuml

title __MODELE's Class Diagram__\n

  namespace Modele {
    enum Depl {
      DOWN
      LEFT
      RIGHT
      UP
      r
      vals
    }
  }
  

  namespace Modele {
    abstract class Modele.Entity {
        # delay : int
        # lives : int
        # running : AtomicBoolean
        {abstract} + start()
        + stopEntity()
    }
  }
  

  namespace Modele {
    class Modele.Ghost {
        + Ghost()
        + action()
        + run()
        + start()
        - changeDirection()
        - changeDirectionRecur()
    }
  }
  

  namespace Modele {
    class Modele.ModelGrid {
        - BASE_GHOST_DELAY : int
        - BASE_PACMAN_DELAY : int
        - FILENAME : String
        - FILE_REGEX : String
        - GHOST_DELAY : int
        - GHOST_NUMBER : int
        - GHOST_XPOS : int
        - GHOST_YPOS : int
        - PCM_XPOS : int
        - PCM_YPOS : int
        - SIZE_X : int
        - SIZE_Y : int
        - gridDynam : ObjDynam[][]
        - gridObj : ObjStatic[][]
        - map : ConcurrentMap<Entity, Point>
        - nbBonusLeft : int
        - r : Random
        + ModelGrid()
        + OkDepl()
        + changeDifficulty()
        + depl()
        + getMap()
        + getNbBonusLeft()
        + getNumberOfGhosts()
        + getObjDynam()
        + getObjStatic()
        + getPacMan()
        + getSIZE_X()
        + getSIZE_Y()
        + hasGhosts()
        + isRunning()
        + reset()
        + reset()
        + run()
        + setGHOST_NUMBER()
        + startEntities()
        + stopEntities()
        - addGhosts()
        - addGhosts()
        - addOneGhost()
        - addOneGhost()
        - getSizeFromLine()
        - isEmpty()
    }
  }
  

  namespace Modele {
    enum ObjDynam {
      BONUS
      POINT
    }
  }
  

  namespace Modele {
    enum ObjStatic {
      EMPTY
      WALL
    }
  }
  

  namespace Modele {
    class Modele.SimplePacMan {
        {static} + MAX_HEALTH : int
        {static} - INVISIBLE_DELAY : int
        {static} - PACMAN_DELAY : int
        {static} - UNTOUCHABLE_DELAY : int
        - invisible : boolean
        - timeLeftInvisible : int
        - timeLeftUntouchable : int
        - untouchable : boolean
        + SimplePacMan()
        + action()
        + getDirection()
        + getLives()
        + hasLives()
        + isInvisible()
        + isUntouchable()
        + reset()
        + reset()
        + run()
        + setCachedDirection()
        + setInvisible()
        + setUntouchable()
        + start()
    }
  }
  

  Modele.Entity o-- Modele.Depl : direction
  Modele.Entity o-- Modele.ModelGrid : modelGrid
  Modele.Ghost -up-|> Modele.Entity
  Modele.ModelGrid .up.|> java.lang.Runnable
  Modele.ModelGrid o-- Modele.SimplePacMan : spm
  Modele.SimplePacMan -up-|> Modele.Entity
  Modele.SimplePacMan o-- Modele.Depl : cachedDirection


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
